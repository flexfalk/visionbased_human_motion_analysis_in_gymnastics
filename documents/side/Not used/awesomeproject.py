#awesomeproject.py#this is our main script that takes an video as input, apply the HPE and save it as a csv file.#by GMSimport cv2import timeimport PoseModule as pd# from annotation import annotationimport numpy as np#annotater# at = annotation()# videoName = "LukketSalto4"# cap = cv2.VideoCapture("../VideoData/" + videoName + ".mp4")cap = cv2.VideoCapture(r'C:\Users\sofu0\OneDrive - ITU\Bachelor\clean_video\Video5\video2\video2.mp4')pTime = 0detector = pd.poseDetector()labels = []a = "beginning"skeleton = []condition = Truewhile condition:    succes, img = cap.read()    if not succes:        break    h, w, c = img.shape    img = detector.findPose(img, draw=True)    lmlist = detector.findPosition(img, draw=False)    if len(lmlist) != 0:        detector.findAngle(img,12, 14, 16)    if len(lmlist) == 0:        print("cant find")        skeleton.append(lmlist)        continue    cTime = time.time()    fps = 1 / (cTime - pTime)    pTime = cTime    cv2.putText(img, str(int(fps)), (70, 50), cv2.FONT_HERSHEY_PLAIN, 3, (255, 0, 0), 3)    key = cv2.waitKey(1)    # if key & 0XFF == ord('j'):    #     a = "jump"    # elif key & 0XFF == ord('l'):    #     a = "landing"    # cv2.putText(img, a, (100, 100), cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 255), 2)    cv2.imshow("Image", img)    # cv2.imshow("Image", blacky)    # labels.append(a)    skeleton.append(lmlist)print(skeleton)print(len(skeleton))# df = at.bounce_to_pandas(skeleton, labels)# frame = pd.DataFrame()## for frame in video:#     for point in frame:# Save to pickle# df.to_pickle("../csvfiles/" + videoName +  ".pkl")# Save with compression# df.to_pickle('pickle-file.pkl.gz', compression='gzip')# df.to_csv("../csvfiles/" + videoName + ".csv", index=False)