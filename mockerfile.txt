                lrs.append(q["lr"])
                momentums.append(q["momentum"])

                #train super robin
                super_robin = hyperparameter_CNN()
                path_train = path_to_subfolder + "\\train.csv"
                train = SkeletonData(path_train)
                train_loader = torch.utils.data.DataLoader(train, batch_size=batch_size, sampler=None)
                s = time()
                super_robin_running_loss = super_robin.train(lr=q["lr"], momentum=q["momentum"], train_loader=train_loader, epochs=150)
                super_robin.save_model(path_to_subfolder + "\\CNN_super-robin")
                t = time()
                print("Time training a super robin at 150 epochs", t-s)
                break

                #get softmax for using in ensemble
                softmax = super_robin.softmax(test_loader)

                super_robin_stats["learning_rate"] = q["lr"]
                super_robin_stats["momentum"] = q["momentum"]
                super_robin_stats["loss"] = super_robin_running_loss
                super_robin_stats["softmax_on_testset"] = softmax


                softmax = np.asarray(softmax).reshape((len(softmax), 4))

                with open(path_to_subfolder + '\\super_robin_stats' + key + '.json', 'w') as fp:
                    json.dump(super_robin_stats, fp)

                print(softmax.shape)
                ensemble_predictions.append(softmax)

            preds = self.get_predictions(ensemble_predictions)

            acc, f1 = self.predict_ensemble(test_loader, preds)

            ensemble_results["acc"] = acc
            ensemble_results["f1"] = f1

            with open(path_to_folder + '\\alfred_stats' + key + '.json', 'w') as fp:
                json.dump(ensemble_results, fp)


            #save all parameters to an overview dict
            overview_dict["lrs"] = lrs
            overview_dict["momentums"] = momentums

            with open(path_to_folder + '\\overview_parameters' + key + '.json', 'w') as fp:
                json.dump(overview_dict, fp)

            #batman
            best_lr = np.mean(lrs)
            best_momentum = np.mean(momentums)

            #train batman

            path_train = path_to_folder + "\\train.csv"
            train = SkeletonData(path_train)
            train_loader = torch.utils.data.DataLoader(train, batch_size=batch_size,sampler=None)

            batman = hyperparameter_CNN()
            batman_running_loss = batman.train(lr=best_lr,momentum=best_momentum,train_loader=train_loader,epochs=10)

            acc, f1 = batman.check_accuracy(test_loader)

            batman_results["acc"] = acc
            batman_results["f1"] = f1
            batman_results["loss"] = batman_running_loss

            with open(path_to_folder + '\\batman_results' + key + '.json', 'w') as fp:
                json.dump(batman_results, fp)

            batman.save_model(path_to_folder + "\\CNN_batman_model")
            break
